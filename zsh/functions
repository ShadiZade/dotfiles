#!/bin/zsh
##################################################################################################
#
#					 ____  _   _    _    ____ ___     _____   _    ____  _____ 
#					/ ___|| | | |  / \  |  _ \_ _|   |__  /  / \  |  _ \| ____|
#					\___ \| |_| | / _ \ | | | | |_____ / /  / _ \ | | | |  _|  
#					 ___) |  _  |/ ___ \| |_| | |_____/ /_ / ___ \| |_| | |___ 
#					|____/|_| |_/_/   \_\____/___|   /____/_/   \_\____/|_____|
#
#					https://github.com/ShadiZade
#					functions
#					zsh functions
#
###################################################################################################
####### symlink location: ~/.config/zsh/ ##########################################################
## terminal-art
source ~/Repositories/dotfiles/zsh/aliases
source ~/Misc/Backups/private-scripts/private-aliases.sh 
source ~/Repositories/scripts/essential-functions.sh

terminal-art () {
    touch "$HOME/.local/share/user-scripts/qotd" "$HOME/.local/share/user-scripts/today-date"
    [[ "$(cat "$HOME/.local/share/user-scripts/today-date")" != "$(date +%m-%d)" ]] && {
	echolor green ":: Updating..." 1
	date +"%m-%d" > "$HOME/.local/share/user-scripts/today-date"
	fortune marxism > "$HOME/.local/share/user-scripts/qotd"
	~/Repositories/scripts/french-republican-time.sh > "$HOME/.local/share/user-scripts/today-date-french"
	clear-line
    }
    [[ "$(cat "$HOME/.local/share/user-scripts/today-date")" != "$(TZ=GMT date +%m-%d)" ]] && {
	
    }
    echo "$(date +"%d %B %Y")"
    cat "$HOME/.local/share/user-scripts/today-date-french"
    ~/Repositories/communist-calendar/fetch-events.sh
    cat "$HOME/.local/share/user-scripts/qotd" | cowsay -f none -W 140
}

## disown
run_disowned () {
    "$@" & disown
}
rdo () {
    run_disowned "$@" 1>/dev/null 2>/dev/null
}

## bigdate
bd () {
    date +"%Y%m%d%H%M"
}

## pg
pg () {
    i=1
    while true;
    do echo -e "\033[31m:: Attempting...\033[0m ($i)"
       ping -qc 1 baidu.com && break
       i=$((i+1))
       sleep 3
    done
}

## a
a () {
    mpv --no-audio-display --osd-fractions "$@"
}

## v
v () {
    rdo mpv --osd-fractions --audio-samplerate=88200 "$@"
}

## xv
xv () {
    [[ -z "$1" ]] \
	&& location_se="$(pwd)" \
	    || location_se="$1"
    IFS=$'\n'
    images=($(fd -H 'jpg$|jpeg$|png$|gif$|webp$|jxl$|jpg_large$|jp2$|svg$|tif$|avif$' -d 1 "$location_se" | sort -V))
    [ -z "$images" ] \
	&& echolor yellow ":: No images found in this directory." \
	&& return
	sxiv -q -- ${images[@]}
}

## xt
xt () {
    [ -z "$1" ] \
	&& echolor yellow ":: Please enter search term." \
	&& return
    [ -z "$2" ] \
	&& location_se="$(pwd)" \
	    || location_se="$2"
    IFS=$'\n'
    images=($(fd -H 'jpg$|jpeg$|png$|gif$|webp$|jxl$|jpg_large$|jp2$|svg$|tif$|avif$' -d 1 "$location_se" | sort -V | grep -i -- "$1" ))
    [ -z "$images" ] \
	&& echolor yellow ":: No images matching \033[37m$1\033[33m found in \033[37m$location_se" \
	&& return
    sxiv -q -- ${images[@]}
    echolor green ":: found \033[37m${#images[@]}\033[32m results matching \033[37m$1\033[32m in \033[37m$location_se"
}
## xvv
xvv () {
    [ -z "$1" ] \
	&& location_se="$(pwd)" \
	    || location_se="$1"
    IFS=$'\n'
    videos=($(fd -H 'mkv$|avi$|mp4$|ts$|mov$|webm$' -d 1 "$location_se" | sort -V))
    [ -z "$videos" ] \
	&& echolor yellow ":: No videos found in this directory." \
	&& return
	v --no-resume-playback --loop=inf -- ${videos[@]}
}

## xtt
xtt () {
    [ -z "$1" ] \
	&& echolor yellow ":: Please enter search term." \
	&& return
    [ -z "$2" ] \
	&& location_se="$(pwd)" \
	    || location_se="$2"
    IFS=$'\n'
    videos=($(fd -H 'mkv$|avi$|mp4$|ts$|mov$|webm$' -d 1 "$location_se" | sort -V | grep -i -- "$1"))
    [ -z "$videos" ] \
	&& echolor yellow ":: No videos matching \033[37m$1\033[33m found in \033[37m$location_se" \
	&& return
    v --no-resume-playback --loop=inf -- ${videos[@]}
    echolor green ":: found \033[37m${#videos[@]}\033[32m results matching \033[37m$1\033[32m in \033[37m$location_se"
}

## xpa
xpa () {
    pacman -Qq | fzf --preview 'pacman -Qil {}' --layout=reverse --bind 'enter:execute(pacman -Qil {} | less)'
}

## xpt
xpt () {
    [ -z "$1" ] && numpack="12" || numpack="$1"
    expac --timefmt='%Y-%m-%d %T' "%l\t%n-%v\t%w" | sort | grep explicit | sed 's/explicit//g' | tail -n "$numpack" 
}

## xpta
xpta () {
    [ -z "$1" ] && numpack="12" || numpack="$1"
    expac --timefmt='%Y-%m-%d %T' "%l\t%n-%v" | sort | tail -n "$numpack"
}

## key-names
key-names () {
	xev | awk -F'[ )]+' '/^KeyPress/ { a[NR+2] } NR in a { printf "%-3s %s\n", $5, $8 }'
}    

## alarm
alarm () {
    echolor yellow ":: Alarm set on ““$(date +%H:%M:%S)”” for ““$1””"
    echolor yellow ":: Wait for alarm..." 1
    sleep "$1" 2>/dev/null || {
	echo
	echolor red ":: ““$1”” is an invalid value!"
	sfx ten-bloops
	return
    }
    printf '\r'
    echolor red-green ":: ALARM RINGING! IT'S ““$(date +%H:%M:%S)”” NOW!" 
    mpv --loop-file=inf --really-quiet "$HOME/.local/share/user-scripts/sounds/glass-hit.wav"
}

## knock
knock () {
    [ -z "$1" ] && knocker="URLLink.acsm" || knocker="$1"
    ~/.local/share/installed-scripts/knock/.knock/knock "$knocker"
}

## mk
mk () {
    ~/Repositories/scripts/kebabization.sh "$@"
    mkdir -pv $(cat "$HOME/.local/share/user-scripts/kebab")
}

## delete-opf
delete-opf () {
    [ "$(pwd)" = "$HOME/Books/xadd" ] || return
    fd -q 'opf$' && move-to-trash-recursively *.opf
    fd -q 'jpg$' && move-to-trash-recursively *.jpg
    fd -q 'original_epub$' && move-to-trash-recursively *.original_epub
}

## detect-extra
detect-extra () {
    extra_dirs_exist=""
    extra_dirs="$(diff <(ls -1 ~) <(cat ~/.local/share/user-scripts/home-dirs) | tail -n +2 | tr '\n' ',' | sed 's/< //g;s/,$//g;s/,/ - /g')"
    [ -z "$extra_dirs" ] && return
    echo -e "\033[31m:: Extra dirs (\033[33m$extra_dirs\033[31m) exist in ~.\033[0m"
    extra_dirs_exist="y"
}
## k
k () {
    ~/Repositories/scripts/mpv-done.sh "$1"
}
## ..c
..c () {
    git add .
    git commit -m $(bd)
    tok
    change-prompt-for-git
}

## dr
dr () {
    basename="$(random-string)"
    [ -z "$2" ] || basename="$2"
    wget -nc -O "$basename" -- "$1"
    ext="$(extension-determiner "$basename")"
    [[ -z "$ext" ]] && {
	echolor red ":: File type for ““$2”” not detected. Please enter extension manually."
	echo -ne "\033[37m>>> \033[0m"
	read -r ext
	    ext=".$ext"
    }
    mv "$basename" "$basename$ext"
    xdg-open "$basename$ext"
}

## lv
lv () {
    echo -e "\033[33m:: Showing a live feed of $(pwd | sed "s|$HOME|~|")\033[0m"
    while true; do
	lln
	sleep 1s
	tput cuu $(lln | wc -l)
    done
}
## wg
wg () {
    [[ -z "$2" ]] && {
	wget --no-use-server-timestamps -nc -t 0 -- "$1"
    } || {
	outname="$(ko "$2")"
	wget --no-use-server-timestamps -O "$outname" -t 0 -- "$1" || return
	echolor yellow ":: Determining extension..."
	ext="$(extension-determiner "$outname")"
	[[ -z "$ext" ]] && {
	    echolor red ":: File type for ““$outname”” not detected. Please enter extension manually."
	    echo -ne "\033[37m>>> \033[0m"
	    read -r ext
	    ext=".$ext"
	}
	mv "$outname" "$outname$ext"
    }
}

## netc
netc () {
    nmcli device disconnect wlp4s0
    sleep 1s
    echo -e "\033[33m:: Connecting to $DEFAULT_WIFI_NETWORK\033[0m"
    nmcli device wifi connect "$DEFAULT_WIFI_NETWORK"
}

## cat-donefiles
cat-donefiles () {
    echo -e "$(cat * | sed 's/^/\\033[4\;37m/g;s/ is done on /\\033[0m is done on \\033[33m/g;s/$/\\033[0m/g')"
}

## fzf-dir
fzf-dir () {
    dir_list="$(eza $hide_flag -1D --no-quotes)"
    [ -z "$dir_list" ] \
	&& echo -e "\033[33m:: No directories.\033[0m" \
	&& return
    chosen_dir="$(echo "$dir_list" | fzf)"
    [ -z "$chosen_dir" ] \
	&& echo -e "\033[33m:: Nothing done.\033[0m" \
	&& return
    cd "$chosen_dir"
}


## ff
ff () {
    while true
    do
	fzf-dir
	[ -z "$chosen_dir" ] \
	    && break
	[ -z "$(eza $hide_flag -1D)" ] \
	    && break
    done
    ll
}

## submv
submv () {
    [ -z "$1" ] \
	&& whichsub=1 \
	    || whichsub="$1"
    eps=($(eza -1D -I renamed-subs))
    i=1
    mkdir "./renamed-subs"
    while [ "$i" -le "${#eps[@]}" ]; do
	curdir="${eps[$i]}"
	curep="$(eza -1 "$curdir" | tail -n +"$whichsub" | sed 1q)"
	cp "$curdir"/"$curep" ./renamed-subs/"$curdir".en.srt
	((i++))
    done
    echo -e "\033[33m:: Renamed the No. $whichsub subtitle files\033[0m"
}

’ () {
    dir="$1"
    [ -z "$1" ] \
	&& dir="."
    fl="$(eza --no-quotes -1f "$dir" | sort | fzf)"
    [ -z "$fl" ] \
	&& echo -e "\033[33m:: Nothing selected.\033[0m" \
	&& return
    file_ext="$(echo "$fl" | awk -F '.' '{print $NF}')"
    fw="$(echo "$dir/$fl")"
    realpath "$fl" | ←
    echo -e "\033[33m:: Opening \033[37m$fw\033[0m"
    case "$file_ext" in
	pdf|ps|djvu|epub)
	    rdo zathura "$fw" ;;
	mp3|wav|wmv|flv|flac|opus|ogg)
            mpv --no-audio-display "$fw" ;;
	mp4|mkv|ts|webm|ogv)
	    rdo mpv --osd-fractions --audio-samplerate=88200 "$fw" ;;
	jpg|png|jpeg|svg|jxl|jpeg_large|webp|gif|tif|avif|jp2)
	    rdo sxiv "$fw" ;;
	txt|md|org|tex|bib|csv|sh|el|lisp|html|css)
	    bat "$fw" ;;
	*)
	    rdo xdg-open "$fw" ;;
    esac
}

xmm () {
    case "$1" in
	"") pkill kiod5
	    jmtpfs ~/.local/mobile/
	    ;;
	end) cd
	     umount ~/.local/mobile/
	     ;;
	*) echo ":: unknown command"
	   ;;
    esac
}

←←← () {
    realpath "${1:-.}" | ←
    realpath "${1:-.}"
}

relevant () {
    [ -z "$1" ] && {
	fd -qH '.relevant-function.sh' \
	    && copyfile='.relevant-function.sh' \
		|| {
		echolor red ':: No relevant-function found'
		return
	    }
    } || {
	copyfile="$1"
    }
    cat "$copyfile" | ←n
    echolor yellow ":: Copied contents of ““$copyfile”” to clipboard."
}

function ren {
    echolor white "$(rename -van -- "$1" "$2" * || {echolor red ":: No results for ““$1””"; return})"
    echolor yellow ":: Click <return> to continue."
    echo -n "> "
    read -r temp
    rename -va -- "$1" "$2" *
}

function pandocjk {
    [[ -z "$1" ]] && {
	echolor red ":: No input."
	return
    }
    [[ -z "$2" ]] && {
	echolor red ":: No output."
	return
    }
    cjk_font="$(fc-list :lang=zh | awk -F ':' '{print $2}' | awk -F ',' '{print $1}' | sort | uniq | fzf | sed 's/^ *//g')"
    [[ -z "$cjk_font" ]] && {
	echolor red ":: Font not chosen."
	return
    }
    echolor yellow-green ":: Using ““$cjk_font””"
    pandoc --pdf-engine=xelatex -V mainfont="$cjk_font" "$1" -o "$2"
}

function ⨯⨯ {
    move-to-trash-recursively $@
    echolor yellow ":: ““$number_of_files_trashed”” files trashed."
}

function determine-if-git-repo {
    fd --no-ignore -qHd 1 "^.git$" \
	&& export CUR_DIR_IS_GIT=1 \
		  || export CUR_DIR_IS_GIT=0
}

function change-prompt-for-git {
    green="#55ff55"
    pink="#ff55ff"
    blue="#34a7dd"
    case $(determine-if-git-repo; echo $CUR_DIR_IS_GIT) in
	0) PROMPT=" %F{$green}%2~%f %S%F{$green} 囍 %D{%H:%M} 🠦 %f%s " ;;
	1) [[ "$(git status -s | wc -l)" -gt 0 ]] \
	       && PROMPT=" %F{$pink}%2~%f %S%F{$pink} 囍 %D{%H:%M} 🠦 %f%s " \
		   || PROMPT=" %F{$blue}%2~%f %S%F{$blue} 囍 %D{%H:%M} 🠦 %f%s " ;;
	*) PROMPT=" %F{#ffffff}%2~%f %S%F{#ffffff} 囍 %D{%H:%M} 🠦 %f%s " ;;
    esac
}
	
function mkmd {
    projname="$(ko "$@")"
    [[ -z "$projname" ]] && {
	echolor red ":: Please enter project name."
	return
    }
    [[ -e "$projname" ]] && {
	echolor red ":: ““$projname”” already exists. Please choose another name."
	return
    }
    echolor yellow ":: Creating new markdown project ““$projname””"
    mkdir "$projname"
    cd "$projname"
    cp ~/Misc/templates/markdown/* .
    sed -i "s/NAMEHERE/$projname/g" ./set.sh
    mv ./template.md ./"$projname".md
    echolor yellow ":: Project ““$projname”” created."
    cd - > /dev/null
}

function pdftoimg {
    [[ -z "$1" ]] && {
	echolor red ":: No input."
	return
    }
    burstdir="slides-"$(ko "$1" | sed 's/-pdf//g')""
    mkdir ./"$burstdir"
    cd ./"$burstdir"
    pdftk ../"$1" burst output "$burstdir-" && {
	echolor yellow ":: PDF file burst into $(eza -1f "$burstdir"*pdf | wc -l) pages."
    }
    IFS=$'\n'
    i=1
    for j in $(eza -1f *pdf)
    do
	pdftoppm -jpeg "$j" "img-$(ko "$j" | sed 's/-pdf//g')"
	echolor blue-yellow ":: Page no. ““$i”” converted."
	((i++))
    done
}

function xmmv {
    [[ -z "$1" ]] && {
	echolor red ":: No input"
	return
    }
    → "$1" ~/.local/mobile/Internal\ shared\ storage/Home/Desktop
}

function xmmb {
    → ~/Books/xadd/* ~/.local/mobile/Internal\ shared\ storage/Books
}

# TODO convert all \033 to echolor
