#!/bin/zsh
##################################################################################################
#
#					 ____  _   _    _    ____ ___     _____   _    ____  _____ 
#					/ ___|| | | |  / \  |  _ \_ _|   |__  /  / \  |  _ \| ____|
#					\___ \| |_| | / _ \ | | | | |_____ / /  / _ \ | | | |  _|  
#					 ___) |  _  |/ ___ \| |_| | |_____/ /_ / ___ \| |_| | |___ 
#					|____/|_| |_/_/   \_\____/___|   /____/_/   \_\____/|_____|
#
#					https://github.com/ShadiZade
#					functions
#					zsh functions
#
###################################################################################################
####### symlink location: ~/.config/zsh/ ##########################################################
## terminal-art
source ~/Repositories/dotfiles/zsh/aliases
source ~/Repositories/dotfiles/zsh/variables
source ~/Repositories/scripts/essential-functions
source ~/Repositories/private/private-aliases.sh

terminal-art () {
    last-updated
    display-unread-arch-news
    touch "$usdd/qotd" "$usdd/today-date"
    [[ "$(cat "$usdd/today-date")" != "$(date +%m-%d)" ]] && {
	echolor green ":: Updating date..." 1
	date +"%m-%d" > "$usdd/today-date"
	echo -n > "$usdd/today-date-hijri"
	echo -n > "$usdd/today-date-french"
	fortune marxism > "$usdd/qotd"
	clear-line
    }
    [[ "$(cat "$usdd/today-date-utc")" != "$(TZ=UTC date +%m-%d)" ]] && {
	# vestigial test, useful to keep to track UTC time in the future
	TZ=UTC date +"%m-%d" > "$usdd/today-date-utc"
    }

    if wifi-connected-p && [[ -z "$(cat "$usdd/today-date-french")" ]] 
     then
	 echolor green ":: Updating French Republican date..." 1 
	 ~/Repositories/scripts/french-republican-time.sh > "$usdd/today-date-french"
	 clear-line
     fi
     if wifi-connected-p && [[ -z "$(cat "$usdd/today-date-hijri")" ]] 
     then
	 echolor green ":: Updating Hijri date..." 1 
	 ~/Repositories/scripts/hijri-date.sh > "$usdd/today-date-hijri"
	 clear-line
     fi
     reading-stats
     echolor mintgreen-violet "∎∎““∎∎”” $(date +%A), $(date +"%d %B %Y")" 1
     [[ ! -z "$(cat "$usdd/today-date-hijri")" ]] && echolor mintgreen ", $(cat "$usdd/today-date-hijri")" 1
     echolor violet-mintgreen "\n∎∎““∎∎ $(cat "$usdd/today-date-french")””" 
     ~/Repositories/communist-calendar/fetch-events.sh
     cat "$usdd/qotd" | cowsay -f none -W $(($(tput cols) - 10))
}

function cd {
    builtin cd "${1:-$HOME}"
    change-prompt-for-git
    check-for-relevant-function
}

## disown
run_disowned () {
    "$@" & disown
}
rdo () {
    run_disowned "$@" 1>/dev/null 2>/dev/null
}

## bigdate
bd () {
    date +"%Y%m%d%H%M"
}

## pg
pg () {
    i=1
    while true;
    do
	echolor orange-aquamarine ":: Attempting... (#““$i””)"
	ping -qc 1 -w 2 archlinux.org && {
	    sfx done
	    break
	}
	i=$((i+1))
    done
}

## a
a () {
    mpv --no-audio-display --osd-fractions "$@"
}

## v
v () {
    rdo mpv --osd-fractions --audio-samplerate=88200 "$@"
}

## xpa
xpa () {
    pacman -Qq | fzf --preview 'pacman -Qil {}' --layout=reverse --bind 'enter:execute(pacman -Qil {} | less)'
}

## xpt
xpt () {
    [ -z "$1" ] && numpack="12" || numpack="$1"
    expac --timefmt='%Y-%m-%d %T' "%l\t%n-%v\t%w" | sort | grep explicit | sed 's/explicit//g' | tail -n "$numpack" 
}

## xpta
xpta () {
    [ -z "$1" ] && numpack="12" || numpack="$1"
    expac --timefmt='%Y-%m-%d %T' "%l\t%n-%v" | sort | tail -n "$numpack"
}

## key-names
key-names () {
	xev | awk -F'[ )]+' '/^KeyPress/ { a[NR+2] } NR in a { printf "%-3s %s\n", $5, $8 }'
}    

## alarm
alarm () {
    alarmdesktop="$(bspc query -d -D --names)"
    starttime="$(date +%H:%M:%S)"
    echolor yellow ":: Alarm set on ““$starttime”” for ““$1””"
    willring="$(dateadd $starttime $1 2>/dev/null)"
    [[ "$starttime" = "$willring" ]] && {
	echolor red ":: Error! ““$1”” is an unrecognized value"
	sfx ten-bloops
	notify-send -u critical -t 4000 "Alarm not set!" "$starttime\n$1\n$willring\nDesktop #$alarmdesktop"
	return 1
    }
    [[ -z "$willring" ]] && {
	echolor red ":: Error! ““$1”” is an unrecognized value"
	sfx ten-bloops
	notify-send -u critical -t 4000 "Alarm not set!" "$starttime\n$1\n$willring\nDesktop #$alarmdesktop"
	return 1
    }
    notify-send -t 3000 "Alarm set." "$starttime\n$1\n$willring\nDesktop #$alarmdesktop"
    echolor yellow ":: Alarm will ring at ““$willring””"
    echolor yellow ":: Wait for alarm..." 1
    sleep "$1" 2>/dev/null || {
	echo
	echolor red ":: Error! ““$1”” is an unrecognized value"
	sfx ten-bloops
	return 1
    }
    printf '\r'
    echolor red-green ":: ALARM RINGING! IT'S ““$(date +%H:%M:%S)”” NOW!"
    notify-send -t 10000 "Alarm Ringing!" "$starttime\n$1\n$willring\nDesktop #$alarmdesktop"
    quodlibet --pause
    mpv --loop-file=inf --really-quiet "$usdd/sounds/glass-hit.wav"
}

## knock
knock () {
    [ -z "$1" ] && knocker="URLLink.acsm" || knocker="$1"
    ~/.local/share/installed-scripts/knock/.knock/knock "$knocker"
}

## mk
mk () {
    mkdir -pv $(kebab "$@")
}

## delete-opf
delete-opf () {
    [ "$(pwd)" = "$HOME/Books/xadd" ] || return
    fd -q 'opf$' && move-to-trash-recursively *.opf
    fd -q 'jpg$' && move-to-trash-recursively *.jpg
    fd -q 'original_epub$' && move-to-trash-recursively *.original_epub
}

## detect-extra
detect-extra-home-dirs () {
    diff -w                                                               \
	  --unchanged-line-format=''                                      \
	 --old-line-format=''                                             \
	 --new-line-format=''                                             \
	 <(sort < "$HOME"/.local/share/user-scripts/home-dirs)            \
	 <(eza -1D --no-quotes "$HOME" | sort)                            \
	&& return						         
    echo -e $(diff -w                                                     \
	 --unchanged-line-format=''                                       \
	 --old-line-format='\033[31mMissing directory in ~:\033[0m %L\n'  \
	 --new-line-format='\033[33mExtra directory in ~:\033[0m %L\n'    \
	 <(sort < "$HOME"/.local/share/user-scripts/home-dirs)            \
 	 <(eza -1D --no-quotes "$HOME" | sort ))                          \
	| sed '/^$/d'
    return 1
}
## k
k () {
    ~/Repositories/scripts/mpv-done.sh "$1"
}
## ..c
..c () {
    git add .
    git commit -m $(bd)
    tok
    change-prompt-for-git
}

## dr
dr () {
    for j in "${@}"
    do
	basename="$(random-string)"
	wget -nc --no-use-server-timestamps -O "$basename" -- "$j" || continue
	ext="$(extension-determiner "$basename")"
	[[ -z "$ext" ]] && {
	echolor red-aquamarine ":: File type for ““$basename”” not detected. Please enter extension manually."
	echolor white ">>> " 1
	read -r ext
	    ext=".$ext"
    }
	mv "$basename" "$basename$ext"
    done
}

## lv
lv () {
    echo -e "\033[33m:: Showing a live feed of $(pwd | sed "s|$HOME|~|")\033[0m"
    while true; do
	lln
	sleep 1s
	tput cuu $(lln | wc -l)
    done
}
## wg
wg () {
    [[ -z "$2" ]] && {
	wget --continue --no-use-server-timestamps -nc -t 0 -- "$1"
    } || {
	outname="$(kebab "$2")"
	wget --continue --no-use-server-timestamps -O "$outname" -t 0 -- "$1" || return
	echolor yellow ":: Determining extension..."
	ext="$(extension-determiner "$outname")"
	[[ -z "$ext" ]] && {
	    echolor red ":: File type for ““$outname”” not detected. Please enter extension manually."
	    echo -ne "\033[37m>>> \033[0m"
	    read -r ext
	    ext=".$ext"
	}
	mv "$outname" "$outname$ext"
    }
  #  sfx done 110
}

netc () {
    nmcli device disconnect wlan0 >/dev/null 2>/dev/null && {
	echolor green ":: Disconnected successfully."
    }
    sleep 1s
    wifi-connected-p
    # defined in /etc/zsh/zshenv
    echolor yellow ":: Connecting to network ““$DEFAULT_WIFI_NETWORK””"
    i=0
    found=1
    until [[ "$found" -eq 0 ]]
    do
	[[ -z "$DEFAULT_WIFI_PASSWORD" ]] && {
	    nmcli device wifi rescan
	    nmcli --wait 4 device wifi connect "$DEFAULT_WIFI_NETWORK" password "$DEFAULT_WIFI_PASSWORD" \
		  >/dev/null 2>/dev/null && found=0 || found=1
	} || {
 	    nmcli device wifi rescan
	    nmcli --wait 4 device wifi connect "$DEFAULT_WIFI_NETWORK" \
		  >/dev/null 2>/dev/null && found=0 || found=1
	}
	[[ "$found" -eq 1 ]] && {
	    ((i++))
	    clear-line
	    echolor red ":: No network named ““$DEFAULT_WIFI_NETWORK”” found. Retrying ($i)..." 1
	    sleep 1s
	}
	[[ "$found" -eq 0 ]] && {
	    clear-line
	    echolor green ":: Network ““$DEFAULT_WIFI_NETWORK”” connected after ““$i”” retries."
	}
    done
    wifi-connected-p
}

## cat-donefiles
cat-donefiles () {
    echo -e "$(cat * | sed 's/^/\\033[4\;37m/g;s/ is done on /\\033[0m is done on \\033[33m/g;s/$/\\033[0m/g')"
}

fresco () {
    dir_list="$(eza $hide_flag -1DX --show-symlinks --no-quotes)"
    [[ -z "$dir_list" ]] && return 1
    chosen_dir="$(echo "$dir_list" | fzf)"
    [[ -z "$chosen_dir" ]] && return 1
    cd "$chosen_dir"
}


## ff
fresco-fresco () {
    while true
    do
	fresco || break
    done
}

## submv
submv () {
    [ -z "$1" ] \
	&& whichsub=1 \
	    || whichsub="$1"
    eps=($(eza -1D -I renamed-subs))
    i=1
    mkdir "./renamed-subs"
    while [ "$i" -le "${#eps[@]}" ]; do
	curdir="${eps[$i]}"
	curep="$(eza -1 "$curdir" | tail -n +"$whichsub" | sed 1q)"
	cp "$curdir"/"$curep" ./renamed-subs/"$curdir".en.srt
	((i++))
    done
    echo -e "\033[33m:: Renamed the No. $whichsub subtitle files\033[0m"
}

’ () {
    dir="$1"
    [[ -z "$1" ]] && dir="."
    fl="$(eza --no-quotes -1fX --show-symlinks "$dir" | sed '/^$/d' | sort | fzf)"
    [[ -z "$fl" ]] && return 1
    file_ext="$(echo "$fl" | awk -F '.' '{print $NF}')"
    fw="$dir/$fl"
    realpath "$fw" | ←
    echolor yellow ":: Opening ““$fw””"
    case "$file_ext" in
	pdf|ps|djvu|epub)
	    rdo zathura "$fw" ;;
	mp3|wav|wmv|flv|flac|opus|ogg)
            mpv --no-audio-display "$fw" ;;
	mp4|mkv|ts|webm|ogv)
	    rdo mpv --osd-fractions --audio-samplerate=88200 "$fw" ;;
	jpg|png|jpeg|svg|jxl|jpeg_large|webp|gif|tif|avif|jp2)
	    rdo sxiv "$fw" ;;
	txt|md|org|tex|bib|sh|el|lisp|html|css)
	    bat "$fw" ;;
	csv)
	    csvlens "$fw" ;;
	*)
	    rdo xdg-open "$fw" ;;
    esac
}

xmm () {
    case "$1" in
	"") pkill kiod5
	    jmtpfs ~/.local/mobile/
	    ;;
	end) cd
	     umount ~/.local/mobile/
	     ;;
	*) echo ":: unknown command"
	   ;;
    esac
}

←←← () {
    realpath "${1:-.}" | ←
    realpath "${1:-.}"
}

relevant () {
    [ -z "$1" ] && {
	fd -qH '.relevant-function.sh' \
	    && copyfile='.relevant-function.sh' \
		|| {
		echolor red ':: No relevant-function found'
		return
	    }
    } || {
	copyfile="$1"
    }
    cat "$copyfile" | ←n
    echolor yellow ":: Copied contents of ““$copyfile”” to clipboard."
}

function ren {
    echolor white "$(rename -van -- "$1" "$2" * || {echolor red ":: No results for ““$1””"; return})"
    echolor yellow ":: Click <return> to continue."
    echo -n "> "
    read -r temp
    rename -va -- "$1" "$2" *
}

function pandocjk {
    [[ -z "$1" ]] && {
	echolor red ":: No input."
	return
    }
    [[ -z "$2" ]] && {
	echolor red ":: No output."
	return
    }
    cjk_font="$(fc-list :lang=zh | awk -F ':' '{print $2}' | awk -F ',' '{print $1}' | sort | uniq | fzf | sed 's/^ *//g')"
    [[ -z "$cjk_font" ]] && {
	echolor red ":: Font not chosen."
	return
    }
    echolor yellow-green ":: Using ““$cjk_font””"
    pandoc --pdf-engine=xelatex -V mainfont="$cjk_font" "$1" -o "$2"
}

function ⨯⨯ {
    move-to-trash-recursively $@
    echolor yellow ":: ““$number_of_files_trashed”” files trashed."
}

function determine-if-git-repo {
    fd --no-ignore -qHd 1 "^.git$" \
	&& export CUR_DIR_IS_GIT=1 \
		  || export CUR_DIR_IS_GIT=0
}

function set-prompt {
    [[ -z "$prompt_color" ]] && export prompt_color="$DEFAULT_PROMPT_COLOR"
    [[ -z "$prompt_symbol" ]] && export prompt_symbol="$DEFAULT_PROMPT_SYMBOL"
    export PROMPT=" %F{$prompt_color}%2~%f %S%F{$prompt_color} $prompt_symbol %D{%H:%M} 🠦 %f%s "
}

function set-prompt-color {
    case "$1" in
	"green")   export prompt_color="#55ff55" ;;
	"pink" )   export prompt_color="#ff55ff" ;;
	"blue" )   export prompt_color="#34a7dd" ;;
	"white")   export prompt_color="#ffffff" ;;
	"default") export prompt_color="$DEFAULT_PROMPT_COLOR" ;;
	*)         export prompt_color="$DEFAULT_PROMPT_COLOR" ;;
    esac
    set-prompt
}

function set-prompt-symbol {
    case "$1" in
	'') export prompt_symbol="$DEFAULT_PROMPT_SYMBOL" ;;
	*)  export prompt_symbol="$@" ;;
    esac
    set-prompt
}


function change-prompt-for-git {
    case $(determine-if-git-repo; echo $CUR_DIR_IS_GIT) in
	0) set-prompt-color green ;;
	1) [[ "$(git status -s | wc -l)" -gt 0 ]] \
	       && set-prompt-color pink          \
		   || set-prompt-color blue ;;
	*) set-prompt-color white ;;
    esac
}

function check-for-relevant-function {
    fd -q -H -d 1 ".relevant-function.sh" .    \
	&& set-prompt-symbol "RELEVANT"          \
	    || set-prompt-symbol
}

function mkmd {
    projname="$(kebab "$@")"
    fontname="$(choose-font)"
    [[ -z "$projname" ]] && {
	echolor red ":: Please enter project name."
	return
    }
    [[ -e "$projname" ]] && {
	echolor red ":: ““$projname”” already exists. Please choose another name."
	return
    }
    echolor yellow ":: Creating new markdown project ““$projname””"
    mkdir "$projname"
    cd "$projname"
    cp ~/Misc/templates/markdown/* .
    sed -i "s/NAMEHERE/$projname/g;s/FONTHERE/$fontname/g" ./set.sh
    mv ./template.md ./"$projname".md
    git init
    git add -A
    git commit -m 'first commit'
    echolor yellow ":: Project ““$projname”” created."
    cd - > /dev/null
}

function pdftoimg {
    [[ -z "$1" ]] && {
	echolor red ":: No input."
	return
    }
    burstdir="slides-"$(kebab "$1" | sed 's/-pdf//g')""
    mkdir ./"$burstdir"
    cd ./"$burstdir"
    pdftk ../"$1" burst output "$burstdir-" && {
	echolor yellow ":: PDF file burst into $(eza -1f "$burstdir"*pdf | wc -l) pages."
    }
    IFS=$'\n'
    i=1
    for j in *pdf
    do
	pdftoppm -jpeg "$j" "img-$(kebab "$j" | sed 's/-pdf//g')"
	echolor blue-yellow ":: Page no. ““$i”” converted."
	((i++))
    done
    unset IFS
}

function xmmv {
    [[ -z "$@" ]] && {
	echolor red ":: No input"
	return
    }
    → "$@" ~/.local/mobile/Internal\ shared\ storage/Home/Desktop
}

function xmmb {
    → ~/Books/xadd/* ~/.local/mobile/Internal\ shared\ storage/Books
}

function open-newsletter {
    loc="$HOME/Documents/newsletters"
    nlname="$(eza -1D "$loc" | fzf)"
    [[ -z "$nlname" ]] && return
    nlfile="$(eza -1f --sort=name "$loc"/"$nlname" | grep "pdf$" | tail -n 1)"
    echolor green ":: Opened newsletter ““${nlfile%'.'*}””"
    zathura "$loc"/"$nlname"/"$nlfile" 2>/dev/null
}

function unread-newsletter {
    loc="$HOME/Documents/newsletters"
    ufile="$usdd/unread-newsletters"
    [[ -z "$(cat "$ufile")" ]] && {
	echolor yellow ":: No unread newsletters."
	return
    }
    nlfile="$(cat "$ufile" | awk -F '/' '{print $NF}' | awk -F '.' '{print $1}' | fzf)"
    [[ -z "$nlfile" ]] && return
    nlfilefull="$(grep "${nlfile}.pdf$" "$ufile")"
    echolor green ":: Opened newsletter ““$nlfile””"
    zathura "$nlfilefull" 2>/dev/null
    echolor yellow ":: Remove ““$nlfile”” from unread? (Y/n) " 1
    read -r remove_from_unread_p
    [[ "$remove_from_unread_p" = "n" ]] && {
	echolor red ":: ““$nlfile”” not removed."
    } || {
	sed -i "s|$nlfilefull||;/^$/d" "$ufile" && \
	    echolor green ":: ““$nlfile”” removed."
    }
}

function ws {
    [[ -z "$1" ]] && {
	wifi-connected-p
	echolor purple-yellow ":: Network: ““$DEFAULT_WIFI_NETWORK””\n:: Password: ““$DEFAULT_WIFI_PASSWORD””"
	wifi-connected-p && {
	    echolor green ":: Currently connected to ““$(nmcli device status | grep '^wlan0' | awk '{print $4}')””"
	}
	echolor yellow ":: Reset to default? (y/N) " 1
	reset_p="n"
	read -r reset_p
	[[ "$reset_p" = "y" ]] && {
	    source ~/Repositories/private/wifi-creds.sh
	    echolor green ":: Default network reset to ““$DEFAULT_WIFI_NETWORK””"
	}
	return
    }
    export DEFAULT_WIFI_NETWORK="$1"
    export DEFAULT_WIFI_PASSWORD="$2"
    echolor green ":: Default network for netc command defined as ““$1””"
    [[ -z "$2" ]] && {
	export DEFAULT_WIFI_PASSWORD=''
	echolor yellow ":: Network was defined without a password."
    }
}

function all-colors {
    IFS=$'\n'
    for j in $(xsv select -n 1 "$usdd"/echolors.csv)
    do
	eval echolor "$j" "$j"
    done
    unset IFS
}

random-file () {
    [[ "$(fd -d 1 "$1" | wc -l)" -eq 0 ]] && return
    fd -i -d 1 "$1" | sed -n "$(($(random-number 5) % $(fd -d 1 "$1" | wc -l) + 1))"p
}

function sl {
    [[ ! -z "$3" ]] && {
	echolor red ":: Error: more than two arguments!"
	return 1
    }
    [[ ! -e "$(realpath "$1")" ]] && {
	echolor red ":: ““$(realpath $1)”” does not exist!"
	return 1
    }
    echolor purple-aquamarine ":: Linking ““$(realpath "$1")””"
    echolor purple-aquamarine ":: To ““$(realpath "${2:-.}")””"
    ln -s "$(realpath "$1")" "$(realpath "${2:-.}")"
}
# TODO convert all \033 to echolor

function last-updated {
    lud="$(datediff -f %d $(tac /var/log/pacman.log | grep -m 1 'full system upgrade' | awk -F 'T' '{print $1}' | tr -d '[') $(date +"%Y-%m-%d"))"
    [[ "$lud" -lt 2 ]] && return
    echolor beige-blue ":: System was last updated ““$lud”” days ago."
}

function enzh {
    command trans -b en:zh "$1" | tee /tmp/chinesetranslation
    pypinyin < /tmp/chinesetranslation
}

function zhen {
    pypinyin "$1"
    command trans -b zh:en "$1"
}

function glyph {
    codepoint=''
    echo "$1" | grep -qi "^U+" && codepoint="${1#*+}"
    [[ -z "$codepoint" ]] && {
	codepoint="$(echo -n "$1" | iconv -f utf8 -t utf32be | xxd -p | sed -E 's/^0+//g')"
	echolor blue-beige ":: ““$1”” is ““U+$codepoint””"
    }
    fc-list :charset="$codepoint" | awk -F ':' '{print $2}' | awk -F ',' '{print $1}' | sort | uniq
}
    
function find-font {
    fc-list | grep -i "$1" | awk -F ': ' '{print $2}' | sort | uniq
}

function pp {
    tmpfile="/tmp/$(random-string)"
    pypinyin "$@" | tee "$tmpfile"
    sed '/^$/d' "$tmpfile" | tr -d '\n' | xclip -selection clipboard
}

function display-unread-arch-news {
    [[ -z "$(cat "$usdd/latest-arch-news-title")" ]] && return 1
    echolor beige ":: Unread Arch News!"
    echolor blue "   “$(cat $usdd/latest-arch-news-title)”"
}
    
function memuse {
    local rootdisk="$(df -h --sync | grep " /$")"
    echolor aquamarine-beige ":: ““$(echo $rootdisk | awk '{print $5}')”” of disk space on " 1
    echolor aquamarine-beige "““$(echo $rootdisk | awk '{print $1}')”” is used " 1
    echolor aquamarine-beige "(““$(echo $rootdisk | awk '{print $3}')”” out of " 1
    echolor aquamarine-beige "““$(echo $rootdisk | awk '{print $2}')””)"
}

function reading-stats {
    [[ ! -d "$HOME/Projects/reading/" ]] && echolor mintgreen-violet "““::”” No reading directory found."
    tbr100_number="$(fd . ~/Projects/reading/tbr/tbr-100/ | wc -l)"
    [[ "$tbr100_number" -gt 100 ]] && tbr100_number="$(echolor red "$tbr100_number")"
    tbr20_number="$(fd . ~/Projects/reading/tbr/tbr-20/ | wc -l)"
    [[ "$tbr20_number" -gt 20 ]] && tbr20_number="$(echolor red "$tbr20_number")"
    tbr5_number="$(fd . ~/Projects/reading/tbr/tbr-5/ | wc -l)"
    [[ "$tbr5_number" -gt 5 ]] && tbr5_number="$(echolor red "$tbr5_number")"
    readingnow_number="$(fd -d 1 -t l -t f . ~/Projects/reading/ | wc -l)"
    [[ "$readingnow_number" -gt 6 ]] && readingnow_number=="$(echolor red "$readingnow_number")"
    done_number="$(fd . ~/Projects/reading/done/$(date +%Y) | wc -l)"
    [[ "$done_number" -eq 0 ]] && done_number="$(echolor red "$done_number")"
    echolor mintgreen-violet "Reading statistics: ““TBR”” $tbr100_number““/””$tbr20_number““/””$tbr5_number ““NOW”” $readingnow_number ““DONE”” $done_number"
}
